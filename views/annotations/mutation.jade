extends ../layout
block body
	//- Helper javascript functions
	- var pubmedLink = function (_id){
	-		if (_id.toLowerCase().slice(0, 3) == 'pmc'){
	-			var href = 'http://www.ncbi.nlm.nih.gov/pmc/articles/' + _id;
	-		} else{
	-			var href = 'http://www.ncbi.nlm.nih.gov/pubmed/' + _id;
	-		}
	-		return "<a href='" + href + "' target='_new'>" + _id + "</a>";
	-	}

	- var mutation_type = function(n){
	-		var n = n.toLowerCase();
	-		if (n == 'missense') return 'Missense';
	-		else if (n == 'nonsense') return 'Nonsense';
	-		else if (n == 'in_frame_del') return 'In-Frame Deletion';
	-		else if (n == 'in_frame_ins') return 'In-Frame Insertion';
	-		else if (n == 'frame_shift_ins') return 'Frame-Shift Insertion';
	-		else if (n == 'frame_shift_del') return 'Frame-Shift Deletion';
	-		else if (n == 'splice_site') return 'Splite-Site';
	-		else return n.charAt(0).toUpperCase() + n.slice(1);
	-	}

	- var mutation_class = function(n){
	-		var n = n.toLowerCase();
	-		if (n == 'snv') return 'Single Nucleotide Variant';
	-		else if (n == 'cna') return 'Copy Number Aberration';
	-		else if (n == 'amp') return 'Copy Number Aberration';
	-		else if (n == 'del') return 'Copy Number Aberration';
	-		else return n.charAt(0).toUpperCase() + n.slice(1);
	-	}

	- var cancerAbbr = function(cancer){
	-		if (cancer){
	-			var c = cancer.toLowerCase();
	-			if (typeof(abbrToCancer[c]) != 'undefined'){
	-				return "<abbr title='" + abbrToCancer[c] + "'>" + c.toUpperCase() + "</abbr>"
	-			} else if (typeof(cancerToAbbr[c]) != 'undefined') {
	-				var abbr = cancerToAbbr[c];
	-				return "<abbr title='" + abbrToCancer[abbr] + "'>" + abbr.toUpperCase() + "</abbr>"
	-			} else {
	-				return cancer;
	-			}
	-		} else {
	-			return "Cancer";
	-		}
	-	}
	br
	div(class="container")
		-if (error)
			h3 Annotation not found: ##{annotation_id}
		-else
			h3
				a(href="/annotations/gene/#{annotation.gene}") #{annotation.gene}
				|  mutation annotation ##{annotation.u_id} - REVISION
			br
			div(class="container")
				div(class="col-lg-4 col-md-4")
					mixin tr_prop(property, value)
						tr
							th #{property}
							td
								block
					table(class="table table-striped", id="annotation-table", annotation-id="#{annotation.u_id}")
						tbody
							+tr_prop("Mutation class") !{mutation_class(annotation.mut_class)}
							+tr_prop("Mutation type") !{mutation_type(annotation.mut_type)}
							+tr_prop("Protein sequence change") !{annotation.protein_seq_change}
							+tr_prop("PMID") !{pubmedLink(annotation.reference)}
							+tr_prop("Source") !{annotation.source}
				div(id = "right")
					div(class="col-lg-8 col-md-8")
						h4 Source preview:
						h4 Related mutations:
			br
			div(class="container annotation-table")
				-var ownAnnotation = null;
				-for(var i = 0; i < annotation.sourceAnnos.length; i++)
					-if(user && annotation.sourceAnnos[i].user_id == user._id)
						-ownAnnotation = annotation.sourceAnnos[i];
				h4 Source annotations:
				table(class="table", id="comment-table")
					-if(!user)
						a(href="/auth/google/returnTo") Login
						|  to add an annotation and vote.
					-if(user || annotation.sourceAnnos.length > 0)
						thead
							tr(style="background:#d3d3d3")
								th(width="10%") Commenter
								th(width="10%") Cancer
								th(width="15%") Heritability
								th(width="10%") Measurement type
								th(width="20%") Characterization
								th Comment
								th(width="7%") Action
						tbody
							-for (var i = 0; i < annotation.sourceAnnos.length; i++)
								- var sourceAnno = annotation.sourceAnnos[i];
								- var cancer = sourceAnno.cancer ? sourceAnno.cancer : "Unknown";
								- var measurement_type = sourceAnno.measurement_type ? sourceAnno.measurement_type : "Unknown";
								- var is_somatic = sourceAnno.is_germline ? !(sourceAnno.is_germline) : "Unknown";
								- var heritability = sourceAnno.is_germline ? "Germline" : ((sourceAnno.is_germline != undefined ) ? "Somatic" : "Unknown");
								- var characterization = sourceAnno.characterization ? sourceAnno.characterization : "Unknown";
								- var comment = sourceAnno.comment;
								- var thisIsOwn = (user && sourceAnno.user_id == user._id);
								tr(class="comment-row " + (thisIsOwn ? "own-comment": ""),
									'data-id'=sourceAnno.asa_u_id)
									td(class="comment-name") #{thisIsOwn ? user.name : "Anonymous"}
									td(class="cancer_field") #{cancer}
									td(class="heritable_field") #{heritability}
									td(class="measurement_type_field") #{measurement_type}
									td(class="characterization_field") #{characterization}
									td(class="comment-body") #{sourceAnno.comment}
									td
										-if(user)
											-if(thisIsOwn)
												a(href="#" class="source-anno-edit")
													i(class="glyphicon glyphicon-pencil") Edit
												a(href="#" class="source-anno-delete")
													i(class="glyphicon glyphicon-trash") Delete
											-else if(!ownAnnotation)
												a(href="#" class="upvote source-anno-agree")
													i(class="glyphicon glyphicon-thumbs-up") Agree
							-if(user) // edit row
								-var displayEdit = ownAnnotation ? "none":"table-row"
								tr(class="edit-row" style="display:#{displayEdit}")
									td
										| Add an annotation:
									td
										input(class="source-anno-input form-control cancer_field",
											type="text",
											list="cancer-list",
											placeholder=ownAnnotation ? "#{ownAnnotation.cancer}" : "")
										datalist(id="cancer-list")
											-var cancerAbbrs = Object.keys(abbrToCancer);
											-for(j = 0; j < cancerAbbrs.length; j++)
												option #{cancerAbbrs[j].toUpperCase()}
									td
										select(class="source-anno-input form-control heritable_field",
											selected="#{is_somatic}",
											placeholder=ownAnnotation ? "#{!ownAnnotation.is_germline}" : "")
											option Unknown
											option Germline
											option Somatic
									td
										input(class="source-anno-input form-control measurement_type_field",
											list="mtypes-list",
											placeholder=ownAnnotation ? "#{ownAnnotation.measurement_type}" : "")
										datalist(id="mtypes-list")
											option Whole-Exome Sequencing
											option Whole-Genome Sequencing
											option Targeting Sequencing
									td
										input(class="source-anno-input form-control characterization_field",
											type="text",
											list="characterization-list",
											placeholder=ownAnnotation ? "#{ownAnnotation.characterization}" : "")
										datalist(id="characterization-list")
											option Structural
											option Functional

									td
										textarea(class="source-anno-input form-control comment_field",
											type="text",
											placeholder=ownAnnotation ? "#{ownAnnotation.comment}" : "")
									td
										a(href="#", id="source-anno-save")
											i(class = "glyphicon glyphicon-save", style="cursor:pointer") Save
										a(href='#', id="source-anno-erase")
											i(class = "glyphicon glyphicon-erase", style="cursor:pointer") Clear
										a(href='#', id="source-anno-cancel")
											i(class = "glyphicon glyphicon-trash", style="cursor:pointer") Cancel
			div(id="annotationStatus", class="text-center", style="width:100%;display:off")


block belowTheFold
	script(src='/components/DataTables/media/js/jquery.dataTables.min.js').
	script(src='/js/dataTableWrapper.js').
	script(type='text/javascript').
		//- Convert the tables into DataTables
		addDataTable({ tableID: "#variant-table", aaSorting: [[0, "asc"]] });
		function annotationStatus(msg, classes) {
			$('#annotationStatus').attr('class', classes);
			$('#annotationStatus').html(msg);
			$('#annotationStatus').show().delay(5000).slideUp();
		}
		var infoClasses	 = 'alert alert-info',
			warningClasses = 'alert alert-warning',
			successClasses = 'alert alert-success';

		$(document).ready(function() {
			var uid = $('#annotation-table').attr('annotation-id');
			var my_comment = $('.comment-name').filter(function () {
				return $.text([this]) != 'Anonymous';
			});

			if (my_comment.length > 0) {
				var voteIcon = my_comment.siblings('.comment-dir').children();
				if (voteIcon.hasClass('glyphicon-thumbs-up')) {
					$('a.upvote').addClass('upvote-on');
				} else if (voteIcon.hasClass('glyphicon-thumbs-down')) {
					$('a.downvote').addClass('downvote-on');
				}
			}

			function saveSourceAnno(row, success_callback) {
				var formData = new FormData();
				var pageData = {};
				formData.append("aber_id", "#{annotation.u_id}");
				formData.append("source", "#{annotation.source}");
				formData.append("reference", "#{annotation.reference}");
				row.children('td').each(function (idx) {
					var leaf = $(this);
					if(leaf.children().length > 0) leaf = $(this).children();
					if(leaf.attr('class') === undefined)
						return;

					var classList = $(leaf).attr("class").split(/\s+/);
					var val;
					if (leaf.is('td')) {
						val = $(leaf).text();
					} else {
						val = $(leaf).val();
					}

					var id, fieldName;
					classList.forEach(function(c) {
						if(c.endsWith('_field')) {
							id = c;
							fieldName = c.replace('_field','');
						}
					});

					if (fieldName) {
						if (fieldName == 'heritable') {
							fieldName = 'is_germline';
							if(val == "Unknown") {
								val = undefined;
							} else {
								val = (val == "Germline" ? true : false);
							}
						}
						formData.append(fieldName, val);
						pageData[id] = val;
					}
				});

				$.ajax({
					url: '/vote/mutation',
					data: formData,
					contentType: false,
					processData: false,
					type: 'POST',
					error: function (xhr) {
						annotationStatus('Database error: ' + xhr.status, warningClasses);
					},
					success: function(response) {
						if (response.error) {
							annotationStatus(response.error, warningClasses);
							return;
						}
						annotationStatus(response.status + ': <a href="./#{annotation.u_id}">Reload</a> to see updates.', successClasses);
						success_callback(response);
					}
				});
			};

			$('a.source-anno-agree').on('click', function(){
				if( $(this).hasClass('upvote-on')) {return;}
				var here = $(this);
				saveSourceAnno(here.parents('tr'), function(response) {
					here.addClass('upvote-on');
					here.attr('style','');
				});
			});

			$('a.source-anno-edit').on('click', function(){
				$(this).parents('tr').hide();
				$("tr.edit-row").show();
			});

			$('a#source-anno-cancel').on('click', function(){
				$(this).parents('tr').hide();
				$("tr.own-comment").show();
			});

			$('a.source-anno-delete').on('click', function(){
				var parentRow = $(this).parents('tr');
				var u_id = parentRow.data('id');
				$.ajax({
					url: "/annotation/mutation/#{annotation.u_id}/source/" + u_id,
					contentType: false,
					processData: false,
					type: 'DELETE',
					error: function (xhr) {
						annotationStatus('Database error: ' + xhr.status, warningClasses);
					},
					success: function(response) {
						if (response.error) {
							annotationStatus(response.error, warningClasses);
							return;
						}
						annotationStatus(response.status, successClasses);
						parentRow.hide();
					}

				});
			});

			$('a#source-anno-erase').on('click', function(){
				$('.source-anno-input').val('');
			});

			$('a#source-anno-save').on('click', function() {
				var thisRow = $(this).parents('tr');
				saveSourceAnno(thisRow, function(response) {
					$(thisRow).hide();
					$("tr.own-comment").show(); // todo: add this row if not already there
				});
			});
		});
