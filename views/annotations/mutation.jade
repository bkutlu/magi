extends ../layout
block body
	//- Helper javascript functions
	- var pubmedLink = function (_id){
	- 		if (_id.toLowerCase().slice(0, 3) == 'pmc'){
	- 			var href = 'http://www.ncbi.nlm.nih.gov/pmc/articles/' + _id;
	-		} else{
	-			var href = 'http://www.ncbi.nlm.nih.gov/pubmed/' + _id;
	-		}
	-		return "<a href='" + href + "' target='_new'>" + _id + "</a>";
	-	}

	- var mutation_type = function(n){
	-		var n = n.toLowerCase();
	-		if (n == 'missense') return 'Missense';
	-		else if (n == 'nonsense') return 'Nonsense';
	-		else if (n == 'in_frame_del') return 'In-Frame Deletion';
	-		else if (n == 'in_frame_ins') return 'In-Frame Insertion';
	-		else if (n == 'frame_shift_ins') return 'Frame-Shift Insertion';
	-		else if (n == 'frame_shift_del') return 'Frame-Shift Deletion';
	-		else if (n == 'splice_site') return 'Splite-Site';
	-		else return n.charAt(0).toUpperCase() + n.slice(1);
	-	}

	- var mutation_class = function(n){
	-		var n = n.toLowerCase();
	-		if (n == 'snv') return 'Single Nucleotide Variant';
	-		else if (n == 'cna') return 'Copy Number Aberration';
	-		else if (n == 'amp') return 'Copy Number Aberration';
	-		else if (n == 'del') return 'Copy Number Aberration';
	-		else return n.charAt(0).toUpperCase() + n.slice(1);
	-	}

	- var cancerAbbr = function(cancer){
	-		if (cancer){
	-			var c = cancer.toLowerCase();
	-			if (typeof(abbrToCancer[c]) != 'undefined'){
	-				return "<abbr title='" + abbrToCancer[c] + "'>" + c.toUpperCase() + "</abbr>"
	-			} else if (typeof(cancerToAbbr[c]) != 'undefined') {
	-				var abbr = cancerToAbbr[c];
	-				return "<abbr title='" + abbrToCancer[abbr] + "'>" + abbr.toUpperCase() + "</abbr>"
	-			} else {
	-				return cancer;
	-			}
	-		} else {
	-			return "Cancer";
	-		}
	-	}
	br
	div(class="container")
		-if (error)
			h3 Annotation not found: ##{annotation_id}
		-else
			h3 #{annotation.gene} mutation annotation ##{annotation.u_id}
			br
			div(class="col-lg-4 col-md-4")
				h4 Annotation Data
					mixin tr_prop(property, value)
						tr 
							td #{property}
							td !{value}
					table(class="table table-striped", id="annotation-table", annotation-id="#{annotation.u_id}")
						thead
							tr(style="background:#d3d3d3")
								th Property
								th Value
						tbody
							+tr_prop("Cancer", cancerAbbr(annotation.cancer))
							+tr_prop("Mutation class", mutation_class(annotation.mut_class))
							+tr_prop("Mutation type", mutation_type(annotation.mut_type))
							+tr_prop("Protein sequence change", annotation.protein_seq_change)
							+tr_prop("Germline?", annotation.is_germline ? annotation.is_germline : "--")
							+tr_prop("Measurement type", annotation.measurement_type ? annotation.measurement_type : "--")
							+tr_prop("PMID", pubmedLink(annotation.reference))
							+tr_prop("Source", annotation.source)
			div(id = "right")
				div(class="col-lg-8 col-md-8")
					h4 Comments
					-if (!annotation.comments || annotation.comments.length == 0)
						| No comments are recorded for this annotation.
					-else
						table(class="table", id="comment-table")
							thead
								tr(style="background:#d3d3d3")
									th Commenter
									th Text
									th Direction
							tbody
								-for (var i = 0; i < annotation.comments.length; i++)
									-var comment = annotation.comments[i];
										tr(class="comment-row")
											td(class="comment-name") #{comment.name}
											td(class="comment-body") #{comment.comment}
											td(class="comment-dir") #{comment.direction}
				hr(style="clear:both")
				div(id="commentVote", class="container", style="width%100;")
					h4 Vote (submitting without a vote deletes comment):
					textarea(class="form-control", id="mutation-comment", placeholder="Enter any comments.", type="textarea")
					| Vote: 
					a(href="#", class="upvote" style="color:#000") &#x25B2;&nbsp;
					a(href="#", class="downvote" style="color:#000") &#x25BC;
					button(type="submit", id="submit", class="btn btn-default") Submit
				div(id="annotationStatus", class="text-center", style="width:100%;display:off")

block belowTheFold
	script(src='/components/DataTables/media/js/jquery.dataTables.min.js').
	script(src='/js/dataTableWrapper.js').
	script(type='text/javascript').
		//- Convert the tables into DataTables
		addDataTable({ tableID: "#variant-table", aaSorting: [[0, "asc"]] });
		function annotationStatus(msg, classes) {
			$('#annotationStatus').attr('class', classes);
			$('#annotationStatus').html(msg);
			$('#annotationStatus').show().delay(5000).slideUp();
		}
		var infoClasses	 = 'alert alert-info',
			warningClasses = 'alert alert-warning',
			successClasses = 'alert alert-success';

		$(document).ready(function() {
		
			var my_comment = $('.comment-name').filter(function () { 
				return $.text([this]) != 'Anonymous';
			});

			if (my_comment.length > 0) {
				$('textarea#mutation-comment').val(my_comment.siblings('.comment-body').text());
				var voteDir = my_comment.siblings('.comment-dir').text();
				if (voteDir === 'up') {
					$('a.upvote').addClass('upvote-on');
				} else if (voteDir === 'down') {
					$('a.upvote').addClass('upvote-on');
				}
			}
			
			$('a.upvote').on('click', function(){
				var sibling = $(this).siblings('a');
				$(this).toggleClass('upvote-on');
				if(sibling.hasClass('downvote-on')) {
					sibling.removeClass('downvote-on');
				}
			});;			
			$('a.downvote').on('click', function(){
				var sibling = $(this).siblings('a');
				$(this).toggleClass('downvote-on');
				if(sibling.hasClass('upvote-on')) {
					sibling.removeClass('upvote-on');
				}
			});

			$('button#submit').on('click', function() {
				var vote = 'remove';
				if ($('a.upvote').hasClass('upvote-on')) {
					vote = 'up';
				} else if ($('a.downvote').hasClass('downvote-on')) {
					vote = 'down';
				}

				var formData = new FormData();
				var uid = $('#annotation-table').attr('annotation-id');
				var comment_body = $('textarea#mutation-comment').val() ? $('textarea#mutation-comment').val() : "<empty>";

				formData.append( "_id", uid );
				formData.append( "vote", vote );
				formData.append( "comment", comment_body);
				$.ajax({
					url: '/vote/mutation',
					data: formData,
					cache: false,
					contentType: false,
					processData: false,
					type: 'POST',
					error: function(error) {
						annotationStatus('Database error: ' + error.status, warningClasses);
					}, 
					success: function(response) {
						if(response.error) {
							annotationStatus(response.error, warningClasses);
						} else {
							annotationStatus(response.status + ': reload to see updates.', successClasses);
						}
						clearVoteAndComment();
					}
				});
			});
			
			function clearVoteAndComment() {
				$('textarea#mutation-comment').val('');	
				$('a.upvote').removeClass('upvote-on');
				$('a.downvote').removeClass('downvote-on');
			}
		});
