extends ../layout
block body
	//- Helper javascript functions
	- var pubmedLink = function (_id){
	-		if (_id.toLowerCase().slice(0, 3) == 'pmc'){
	-			var href = 'http://www.ncbi.nlm.nih.gov/pmc/articles/' + _id;
	-		} else{
	-			var href = 'http://www.ncbi.nlm.nih.gov/pubmed/' + _id;
	-		}
	-		return "<a href='" + href + "' target='_new'>" + _id + "</a>";
	-	}

	- var mutation_type = function(n){
	-		var n = n.toLowerCase();
	-		if (n == 'missense') return 'Missense';
	-		else if (n == 'nonsense') return 'Nonsense';
	-		else if (n == 'in_frame_del') return 'In-Frame Deletion';
	-		else if (n == 'in_frame_ins') return 'In-Frame Insertion';
	-		else if (n == 'frame_shift_ins') return 'Frame-Shift Insertion';
	-		else if (n == 'frame_shift_del') return 'Frame-Shift Deletion';
	-		else if (n == 'splice_site') return 'Splite-Site';
	-		else return n.charAt(0).toUpperCase() + n.slice(1);
	-	}

	- var mutation_class = function(n){
	-		var n = n.toLowerCase();
	-		if (n == 'snv') return 'Single Nucleotide Variant';
	-		else if (n == 'cna') return 'Copy Number Aberration';
	-		else if (n == 'amp') return 'Copy Number Aberration';
	-		else if (n == 'del') return 'Copy Number Aberration';
	-		else return n.charAt(0).toUpperCase() + n.slice(1);
	-	}

	- var cancerAbbr = function(cancer){
	-		if (cancer){
	-			var c = cancer.toLowerCase();
	-			if (typeof(abbrToCancer[c]) != 'undefined'){
	-				return "<abbr title='" + abbrToCancer[c] + "'>" + c.toUpperCase() + "</abbr>"
	-			} else if (typeof(cancerToAbbr[c]) != 'undefined') {
	-				var abbr = cancerToAbbr[c];
	-				return "<abbr title='" + abbrToCancer[abbr] + "'>" + abbr.toUpperCase() + "</abbr>"
	-			} else {
	-				return cancer;
	-			}
	-		} else {
	-			return "Cancer";
	-		}
	-	}
	br
	div(class="container")
		-if (error)
			h3 Annotation not found: ##{annotation_id}
		-else
			h3
				a(href="/annotations/gene/#{annotation.gene}") #{annotation.gene}
				|  mutation annotation ##{annotation.u_id} - REVISION
			br
			div(class="container")
				div(class="col-lg-4 col-md-4")
					mixin tr_prop(property, value)
						tr
							th #{property}
							td
								block
					table(class="table table-striped", id="annotation-table", annotation-id="#{annotation.u_id}")
						tbody
							+tr_prop("Mutation class") !{mutation_class(annotation.mut_class)}
							+tr_prop("Mutation type") !{mutation_type(annotation.mut_type)}
							+tr_prop("Protein sequence change") !{annotation.protein_seq_change}
							+tr_prop("PMID") !{pubmedLink(annotation.reference)}
							+tr_prop("Source") !{annotation.source}
				div(id = "right")
					div(class="col-lg-8 col-md-8")
						h4 Source preview:
						h4 Related mutations:
			br
			div(class="container annotation-table")
				-var ownAnnotation = null;
				-for(var i = 0; i < annotation.sourceAnnos.length; i++)
					-if(user && annotation.sourceAnnos[i].name === user.name)
						-ownAnnotation = annotation.sourceAnnos[i];
				h4 Source annotations:
				table(class="table", id="comment-table")
					-if(!user)
						a(href="/auth/google/returnTo") Login
						|  to add an annotation and vote.
					-if(user || annotation.sourceAnnos.length > 0)
						thead
							tr(style="background:#d3d3d3")
								th(width="10%") Commenter
								th(width="10%") Cancer
								th(width="15%") Somatic?
								th(width="10%") Measurement type
								th(width="20%") Characterization
								th Comment
								th(width="3%") Score
								th(width="7%") Action
						tbody
							-for (var i = 0; i < annotation.sourceAnnos.length; i++)
								- var sourceAnno = annotation.sourceAnnos[i];
								- var measurement_type = sourceAnno.measurement_type ? sourceAnno.measurement_type : "--";
								- var is_somatic = sourceAnno.is_germline ? !(sourceAnno.is_germline) : "Unknown"
								- var characterization = sourceAnno.characterization ? annotation.characterization : "--"
								- var comment = sourceAnno.comment;
								- var ownComment = (user && sourceAnno.name === user.name);
								tr(class="comment-row " + ownComment ? "own-comment": "")
									td(class="comment-name")
										-if (ownComment)
											#{sourceAnno.name}
										-else
											| Anonymous
									td #{annotation.cancer}
									td #{is_somatic}
									td #{measurement_type}
									td #{characterization}
									td(class="comment-body") #{comment.comment}
									td --
									td
										-if(user)
											-if(ownComment)
												a(href="#" class="source-anno-edit")
													i(class="glyphicon glyphicon-pencil")
												a(href="#" class="source-anno-delete")
													i(class="glyphicon glyphicon-trash")
											-else
												a(href="#" class="upvote source-anno-upvote")
													i(class="glyphicon glyphicon-thumbs-up")
												a(href="#" class="downvote source-anno-downvote")
													i(class="glyphicon glyphicon-thumbs-down")
							-if(user) // edit row
								-var displayEdit = ownAnnotation ? "none":"table-row"
								tr(class="edit-row" style="display:#{displayEdit}")
									td
										| Add an annotation:
									td
										input(class="source-anno-input form-control",
											type="text",
											id="cancer_field",
											list="cancer-list",
											placeholder=ownAnnotation ? "#{ownAnnotation.cancer}" : "")
										datalist(id="cancer-list")
											-var cancerAbbrs = Object.keys(abbrToCancer);
											-for(j = 0; j < cancerAbbrs.length; j++)
												option #{cancerAbbrs[j].toUpperCase()}
									td
										select(id="source-anno-input is_somatic_field", class="form-control",
											selected="#{is_somatic}",
											placeholder=ownAnnotation ? "#{!ownAnnotation.is_germline}" : "")
											option Unknown
											option False
											option True
									td
										input(class="source-anno-input form-control",
											id="measurement_field",
											list="mtypes-list",
											placeholder=ownAnnotation ? "#{ownAnnotation.measurement_type}" : "")
										datalist(id="mtypes-list")
											option WCA
											option WGS
									td
										input(class="source-anno-input form-control",
											type="text",
											id="characterization_field",
											list="characterization-list",
											placeholder=ownAnnotation ? "#{ownAnnotation.characterization}" : "")
										datalist(id="characterization-list")
											option Structural
											option Functional

									td
										textarea(class="source-anno-input form-control",
											type="text",
											id="comment",
											placeholder=ownAnnotation ? "#{ownAnnotation.comment}" : "")
									td --
									td
										a(href="#", id="source-anno-save")
											i(class = "glyphicon glyphicon-save", style="cursor:pointer")
										a(href='#', id="source-anno-erase")
											i(class = "glyphicon glyphicon-erase", style="cursor:pointer")


block belowTheFold
	script(src='/components/DataTables/media/js/jquery.dataTables.min.js').
	script(src='/js/dataTableWrapper.js').
	script(type='text/javascript').
		//- Convert the tables into DataTables
		addDataTable({ tableID: "#variant-table", aaSorting: [[0, "asc"]] });
		function annotationStatus(msg, classes) {
			$('#annotationStatus').attr('class', classes);
			$('#annotationStatus').html(msg);
			$('#annotationStatus').show().delay(5000).slideUp();
		}
		var infoClasses	 = 'alert alert-info',
			warningClasses = 'alert alert-warning',
			successClasses = 'alert alert-success';

		$(document).ready(function() {
			var uid = $('#annotation-table').attr('annotation-id');
			var my_comment = $('.comment-name').filter(function () {
				return $.text([this]) != 'Anonymous';
			});

			if (my_comment.length > 0) {
				var voteIcon = my_comment.siblings('.comment-dir').children();
				if (voteIcon.hasClass('glyphicon-thumbs-up')) {
					$('a.upvote').addClass('upvote-on');
				} else if (voteIcon.hasClass('glyphicon-thumbs-down')) {
					$('a.downvote').addClass('downvote-on');
				}
			}

			$('a.source-anno-upvote').on('click', function(){
				var sibling = $(this).siblings('a');
				$(this).toggleClass('upvote-on');
				sibling.removeClass('downvote-on');
			});;

			$('a.source-anno-downvote').on('click', function(){
				var sibling = $(this).siblings('a');
				$(this).toggleClass('downvote-on');
				sibling.removeClass('upvote-on');
			});

			$('a.source-anno-edit').on('click', function(){
				$(this).parents('tr').hide();
				$("tr.edit-row").show();
			});

			$('a.source-anno-delete').on('click', function(){
				$(this).parents('tr').hide();
			});

			$('a#source-anno-erase').on('click', function(){
				$('.source-anno-input').val('');
			});

			$('a#source-anno-save').on('click', function() {
				$(this).parents('tr').hide();
				$("tr.own-comment").show(); // todo: add this row if not already there
			});

			function clearVoteAndComment() {
				$('textarea#mutation-comment').val('');
				$('a.upvote').removeClass('upvote-on');
				$('a.downvote').removeClass('downvote-on');
			}

			$('span.glyphicon-ok-circle').on('click', function() {
				var dataField = $(this).prev();
				var dataName = dataField.attr('id').replace('_field','');

				var dataValue = dataField.val();
				if (dataName === 'is_germline') {
					dataValue = (dataValue.toLowerCase() === 'true');
				}

				var formData = new FormData();
				formData.append('anno_id', uid);
				formData.append(dataName, dataValue);

				var thisControl = $(this);
				restoreViewMode($(this));
				$.ajax({
					url: './' + uid,
					data: formData,
					cache: false,
					contentType: false,
					processData: false,
					type: 'PUT',
					error: function(error) {
						annotationStatus('Database error: ' + error.status, warningClasses);
					},
					success: function(response) {
						if(response.error) {
							annotationStatus(response.error, warningClasses);
						} else {
							annotationStatus(response.status, successClasses);
							updateValue(thisControl, dataValue);
						}
					}
				});
			});

			function updateValue(element, newval) {
				console.log('update', newval);
				console.log('elem', element);
				console.log('elem', element.parent());
				console.log('elem', element.parent().prev());
				console.log('elem', element.parent().prev().children('div.entry'));
				console.log('text', element.parent().prev().children('div.entry').text());
				element.parent().prev().children('div.entry').text(newval);
			}

			function restoreViewMode(element) {
				element.parent().prev().show();
				element.parent().hide();
			}

		});
