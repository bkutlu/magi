extends ../layout
block body
	- var user_id = user ? user._id + "" : "";
	div(class="container annotation-table", id="gene-annotations")
		br
		h3 #{gene} mutation annotations - REVISION
		br
		//- Helper javascript functions
		- var pubmedLink = function (_id){
		- 		if (_id.toLowerCase().slice(0, 3) == 'pmc'){
		- 			var href = 'http://www.ncbi.nlm.nih.gov/pmc/articles/' + _id;
		-		} else {
		-			var href = 'http://www.ncbi.nlm.nih.gov/pubmed/' + _id;
		-		}
		-		return "<a href='" + href + "' target='_new'>" + _id + "</a>";
		-	}

		- var mutation_type = function(n){
		-		var n = n.toLowerCase();
		-		if (n == 'missense') return 'Missense';
		-		else if (n == 'nonsense') return 'Nonsense';
		-		else if (n == 'in_frame_del') return 'In-Frame Deletion';
		-		else if (n == 'in_frame_ins') return 'In-Frame Insertion';
		-		else if (n == 'frame_shift_ins') return 'Frame-Shift Insertion';
		-		else if (n == 'frame_shift_del') return 'Frame-Shift Deletion';
		-		else if (n == 'splice_site') return 'Splite-Site';
		-		else return n.charAt(0).toUpperCase() + n.slice(1);
		-	}

		- var mutation_class = function(n){
		-		var n = n.toLowerCase();
		-		if (n == 'snv') return 'Single Nucleotide Variant';
		-		else if (n == 'cna') return 'Copy Number Aberration';
		-		else if (n == 'amp') return 'Copy Number Aberration';
		-		else if (n == 'del') return 'Copy Number Aberration';
		-		else return n.charAt(0).toUpperCase() + n.slice(1);
		-	}

		- var cancerAbbr = function(cancer){
		-		if (cancer){
		-			var c = cancer.toLowerCase();
		-			if (typeof(abbrToCancer[c]) != 'undefined'){
		-				return "<abbr title='" + abbrToCancer[c] + "'>" + c.toUpperCase() + "</abbr>"
		-			} else if (typeof(cancerToAbbr[c]) != 'undefined') {
		-				var abbr = cancerToAbbr[c];
		-				return "<abbr title='" + abbrToCancer[abbr] + "'>" + abbr.toUpperCase() + "</abbr>"
		-			} else {
		-				return cancer;
		-			}
		-		} else {
		-			return "Cancer";
		-		}
		-	}

		table(class="table table-condensed", id="gene-annotation-table")
			thead
				tr(style="background:#e3e3e3")
					th Mutation class
					th Mutation type
					th Protein sequence change
					th(class="extra-width")
					th PMID / PMCID
					th Source
					th Associated cancer
					th Somatic?
					th Measurement type
					th Characterization
					th Agree?
					th Edit
			tbody
				// todo: make the popover
				mixin modeDisplay(val)
					-if(val && val.mode)
						| #{val.mode ? val.mode + " (" + val.count + "/" + numAnnos + ")" : "Unknown (0/0)"}
					-else
						| Unknown (0/0)
				-for (var i = 0; i < annotations.length; i++)
					- var d = annotations[i];
					- var cancer = cancerAbbr(d.cancer);
					- var mutationClass = d.mut_class ? d.mut_class : "--";
					- var mutationType = d.mut_type ? d.mut_type : "--";
					- var proteinSeqChange = d.protein_seq_change ? d.protein_seq_change : "--";
					- var numAnnos = d.sourceAnnos.length;
					- var pmidRef = d.reference;
					- var source = d.source;

					- var majorityFields = ["cancer", "is_germline", "measurement_type", "characterization"];
					- var heritable = d.is_germline_mode;
					- if (heritable && heritable.mode)
						-heritable.mode = heritable.mode ? "Germline" : "Somatic";
					- var measurement_type = d.measurement_type_mode;
					- var characterization = d.characterization_mode;
					- var id = d.u_id;
					- var my_annotation = d.sourceAnnos.filter(function(anno) {return anno.user_id == user_id;})[0];
					- var agreesMajority = my_annotation && majorityFields.every(function (field) {return my_annotation[field] == d[field + "_mode"].mode;})
					tr
						td #{mutation_class(mutationClass)}
						td #{mutation_type(mutationType)}
						td #{proteinSeqChange}
						td(class="extra-width")
						td(class="reference", "data-reference"="#{pmidRef}") !{pubmedLink(pmidRef)}
						td(class="source", "data-source"="#{source}") #{source}
						td(class="cancer", "data-cancer"="#{d.cancer_mode.mode}")
							+modeDisplay(d.cancer_mode)
						td(class="is_germline", "data-is_germline"="#{d.is_germline_mode.mode}")
							+modeDisplay(heritable)
						td(class="measurement_type", "data-measurement_type"="#{d.measurement_type_mode.mode}")
							+modeDisplay(d.measurement_type_mode)
						td(class="characterization", "data-characterization"="#{d.characterization_mode.mode}")
							+modeDisplay(d.characterization_mode.mode)
						td
							span(id="vote-like-#{id}",
								class="glyphicon glyphicon-thumbs-up anno-vote-on " + (agreesMajority ? "anno-liked" : "")
								'data-id'="#{id}",
								style=(agreesMajority ? "" : "cursor:pointer"))
						td
							a(href='/annotation/mutation/#{id}', class="glyphicon glyphicon-pencil")
		br
		div(id="annotationStatus", class="text-center", style="width:100%;display:off")

block belowTheFold
	script(src='/components/DataTables/media/js/jquery.dataTables.min.js').
	script(src='/js/dataTableWrapper.js').
	script(type='text/javascript').
		//- Convert the tables into DataTables
		var tbl = addDataTable({
				tableID: "#gene-annotation-table", aaSorting: [[0, "asc"]]
			});

		$("#extra-width").css({'width': '30px'});
		$("#gene-annotation-table_info").css({'font-weight': 'bold', 'font-size': '110%'});
		$(document).ready(function(){

			$('span.anno-vote-on').on('click', function() {
				// do nothing if it's already liked
				if( $(this).hasClass('anno-liked')) {
					return;
				}
				var formData = new FormData();
				formData.append("aber_id", $(this).data('id'));
				var majorityData = $(this).data('majority');

				var fields = ['source', 'reference', 'cancer', 'is_germline', 'measurement_type', 'characterization'];
				var here = $(this);
				fields.forEach(function(field) {
					var elem = here.parent().siblings('td.' + field);
					var datum = elem.data(field);
					formData.append(field, datum);
				});

				$.ajax({
					url: '/vote/mutation',
					data: formData,
					contentType: false,
					processData: false,
					type: 'POST',
					error: function (xhr) {
						annotationStatus('Database error: ' + xhr.status, warningClasses);
					},
					success: function(response) {
						if (response.error) {
							annotationStatus(response.error, warningClasses);
							return;
						}
						annotationStatus(response.status, successClasses);
						here.addClass('anno-liked');
						here.attr("style","");
					}
				});
			});
		});



		// Make sure to re-bind the onclick functionality whenever the table changes
		tbl.on( 'draw', function () {
			setupPopovers();
		} );


		var infoClasses	 = 'alert alert-info',
			warningClasses = 'alert alert-warning',
			successClasses = 'alert alert-success';

		function annotationStatus(msg, classes) {
			$('#annotationStatus').attr('class', classes);
			$('#annotationStatus').html(msg);
			$('#annotationStatus').show().delay(5000).slideUp();
		}
