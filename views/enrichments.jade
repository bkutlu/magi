extends layout
block body
	br
	div(class="container")
		h3 Enrichment statistics
		br
		div(class="panel panel-default")
			div(class="panel-heading", style="padding:5px")
				h5(class="panel-title", style="cursor:pointer;font-size:14px;", id="datasetsLink")
					| Datasets used to compute enrichment statistics
					span(style="float:right") [+]
			div(id="collapseDatasets", class="panel-collapse collapse", style="padding:5px")
				ul
				- for (var i in datasets )
					li #{datasets[i].title} (#{datasets[i].samples.length} samples)
		ul(class="nav nav-tabs")
			- for (var i in genes )
				- if (i == 0) var className = "active";
				- else var className = "";
				li(role="presentation", class="#{className}")
					a(id="gene-#{genes[i]}") #{genes[i]}
		br
		select(id="category", class="form-control")
		br
		div(id="contingency-table", style="display:none")
			h4 Contingency table
			div(id="samples-removed")
				| Removed&nbsp;
				span
				| &nbsp;samples with missing annotation data.
			table(class="table table-hover", style="width: auto !important;min-width:300px")
		br
		div(id="tests", style="display:none")
			h4 Statistical tests
			select(class="form-control")
		br
		div(id="test-results", style="display:none")
			div(id="report") 
			table(class="table table-hover", style="width:auto !important;min-width:300px")
				thead
					tr(style="background:#d3d3d3")
						th Property
						th Value
				tbody

block belowTheFold
	//- Dependencies
	script(src='/components/d3/d3.min.js').
	//- Main for enrichment interaction
	script(type="text/javascript").
		var genes = !{JSON.stringify(genes)},
			datasets = !{JSON.stringify(datasets)},
			geneToMutatedSamples = !{JSON.stringify(geneToMutatedSamples)},
			samples = !{JSON.stringify(samples)},
			annotationToColor = !{JSON.stringify(sampleAnnotations.annotationToColor)},
			sampleToAnnotations = !{JSON.stringify(sampleAnnotations.sampleToAnnotations)},
			categories = !{JSON.stringify(sampleAnnotations.categories)};

		// Add toggling to the datasets link
		$("#datasetsLink").click(function(e){
			e.preventDefault();
			e.stopPropagation();// prevent the default anchor functionality
			$("#collapseDatasets").collapse('toggle');
		});

		// Identify the data categories with at most 5 values
		var categoryValues = {},
			discreteCategories = categories.filter(function(c, i){
				var values = samples.map(function(s){ return sampleToAnnotations[s][i]; });
				categoryValues[c] = values;
				return d3.set(values).values().length < 10;
			});

		// Select the elements that we're going to modify
		var categorySelect = d3.select("select#category"),
			cTable = d3.select('div#contingency-table table'),
			tests = d3.select('div#tests select'),
			testResults = d3.select('div#test-results'),
			statsTableBody = testResults.select('table tbody'),
			report = d3.select("div#report"),
			samplesRemoved = d3.select('div#samples-removed span');

		// Add the onclick enrichment statistics
		var geneToCategoryToStats = {};
		genes.forEach(function(g, j){
			// Compute the enrichment statistics for the discrete categories
			geneToCategoryToStats[g] = {};
			var mutated = 0;
			var X = samples.map(function(s){
				if (geneToMutatedSamples[g][s]) mutated += 1;
				return geneToMutatedSamples[g][s] ? "Mutated" : "Not Mutated";
			});
			console.log(g, mutated);

			var promises = discreteCategories.map(function(c, i){
				var dfd = new jQuery.Deferred(),
					Y = categoryValues[c];

				$.ajax({
					// Note: can't use JSON otherwise IE8 will pop open a dialog
					// window trying to download the JSON as a file
					url: '/enrichments/stats',
					data: JSON.stringify({X: X, Y: Y}),
					dataType: 'json',
					contentType: 'application/json; charset=utf-8',
					type: 'POST',

					error: function(xhr) {
						console.error('Error: ' + xhr.status);
						dfd.resolve();
					},

					success: function(response) {
						if(response.error) {
							console.error('Enrichment stats: Oops, something bad happened.');
							return;
						} else{
							console.log(response)
							geneToCategoryToStats[g][c] = response.data;
						}
						dfd.resolve();
					}
				});
				return dfd;
			});

			$.when.apply($, promises).then(function() {
				// Add onclick functions to show the enrichment results per gene
				$('a#gene-' + g).on('click', function(){
					// Update the "active" gene
					$('a').parent().removeClass('active');
					$(this).parent().addClass('active');
					d3.select('div#contingency-table').style('display', 'none');
					d3.select('div#tests').style('display', 'none');
					testResults.style('display', 'none');

					//
					categorySelect.selectAll('*').remove();
					var geneCategories = Object.keys(geneToCategoryToStats[g]);
					var options = categorySelect.selectAll('.cat-option')
						.data(["-- choose category --"].concat(geneCategories)).enter()
						.append('option')
						.attr('value', function(d){ return d; })
						.text(function(d){ return d; });

					categorySelect.on('change', function(){
						var category = categorySelect.property('value');
						if (category !== '-- choose category --'){
							var datum = geneToCategoryToStats[g][category];

							// Show the table and the tests, and remove all their previous
							// elements
							d3.select('div#contingency-table').style('display', 'inline');
							cTable.selectAll('*').remove();
							d3.select('div#tests').style('display', '');
							tests.selectAll('*').remove();

							// Record the number of samples removed
							samplesRemoved.text(datum.samplesRemoved);

							// Populate the table
							var thead = cTable.append('thead'),
								tbody = cTable.append('tbody');
							
							thead.append('tr')
								.style('background', '#d3d3d3')
									.selectAll('.enrichment-th')
									.data(datum.table[0]).enter()
									.append('th')
									.text(function(d){ return d; });
							
							tbody.selectAll('.enrichment-tr')
								.data(datum.table.slice(1, datum.table.length)).enter()
								.append('tr')
								.selectAll('.enrichment-td')
								.data(function(d){ return d; }).enter()
									.append('td')
									.style('font-weight', function(d, i){ return i == 0 ? 'bold' : 'normal'; })
									.style('background', function(d, i){ return i == 0 ? '#d3d3d3' : '#ffffff'; })
									.style('text-align', function(d, i){ return i == 0 ? 'right' : 'center'; })
									.text(function(d){ return d; });

							// Add the statistical tests
							var testNames = Object.keys(datum.stats);
							var testOptions = tests.selectAll('.stat-test-option')
								.data(["-- choose test --"].concat(testNames)).enter()
								.append('option')
								.attr('value', function(d){ return d; })
								.text(function(d){ return d; });

							tests.on('change', function(){
								var test = tests.property('value');
								if (test !== '-- choose test --'){
									// Show the test results
									testResults.style('display', 'inline');
									testResults.select('table').style('display', '');
									statsTableBody.selectAll('*').remove();

									// Add the P-value and statistic (if applicable)
									report.html(datum.stats[test].report.html);

									// Populate the table body
									var attributes = Object.keys(datum.stats[test]).filter(function(d){ return d !== "report"; });
									if (attributes.length == 0) testResults.select('table').style('display', 'none');
									statsTableBody.selectAll('.stats-table-row')
										.data(attributes).enter()
										.append('tr')
										.selectAll('.stats-table-cell')
										.data(function(d){ return [d, datum.stats[test][d]]; }).enter()
										.append('td')
										.style('font-weight', function(d, i){ return i == 0 ? 'bold' : 'normal'; })
										.text(function(d){ return d; });

								} else{
									// Hide the test results
									testResults.style('display', 'none');
								}
							});

						} else {
							// Hide the table and the tests
							d3.select('div#contingency-table').style('display', 'none');
							d3.select('div#tests').style('display', 'none');
						}
					});
				});

				// Load the categories for the first gene (which is by default visible) 
				// by simulating a click on it
				$('a#gene-' + genes[0]).click();

			}, function(e) {
				console.log("My ajax failed");
			});
		});